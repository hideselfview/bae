name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        rust: [stable, beta]
        exclude:
          # Only test beta on one OS to save CI time
          - os: macos-latest
            rust: beta
          - os: windows-latest
            rust: beta

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf libxdo-dev libasound2-dev

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: bae/package-lock.json

    - name: Install Node dependencies
      working-directory: ./bae
      run: npm ci

    - name: Check Rust formatting
      working-directory: ./bae
      run: cargo fmt -- --check

    - name: Run Clippy (Linux/macOS)
      if: runner.os != 'Windows'
      working-directory: ./bae
      run: |
        cargo clippy --lib -- -D warnings
        cargo clippy --bin bae -- -D warnings
        # Run clippy on each integration test individually
        # Why: `cargo clippy --tests` compiles the binary target in test mode,
        # which causes dead_code warnings for test-utils feature methods that
        # the binary doesn't use. By checking each test separately, we avoid
        # compiling the binary target while still checking all integration tests.
        for test_file in tests/*.rs; do
          if [ -f "$test_file" ]; then
            test_name=$(basename "$test_file" .rs)
            echo "Checking integration test: $test_name"
            cargo clippy --test "$test_name" --features test-utils -- -D warnings
          fi
        done

    - name: Run Clippy (Windows)
      if: runner.os == 'Windows'
      working-directory: ./bae
      shell: cmd
      run: |
        cargo clippy --lib -- -D warnings
        cargo clippy --bin bae -- -D warnings
        REM Run clippy on each integration test individually
        REM Why: `cargo clippy --tests` compiles the binary target in test mode,
        REM which causes dead_code warnings for test-utils feature methods that
        REM the binary doesn't use. By checking each test separately, we avoid
        REM compiling the binary target while still checking all integration tests.
        for %%f in (tests\*.rs) do (
          for %%n in ("%%~nf") do (
            echo Checking integration test: %%~n
            cargo clippy --test "%%~n" --features test-utils -- -D warnings
          )
        )

    - name: Run tests
      working-directory: ./bae
      run: cargo test --verbose

    - name: Build application
      working-directory: ./bae
      run: cargo build --verbose --release

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      working-directory: ./bae
      # Ignore RUSTSEC-2023-0071 (rsa crate): False positive - appears in Cargo.lock
      # via sqlx-mysql transitive dependency, but sqlx-mysql is not actually compiled
      # or linked since we only use the sqlite feature
      run: cargo audit --ignore RUSTSEC-2023-0071

  build-artifacts:
    name: Build Artifacts
    runs-on: ${{ matrix.os }}
    needs: [test, security]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y libwebkit2gtk-4.1-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev patchelf libxdo-dev libasound2-dev

    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-stable-

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: bae/package-lock.json

    - name: Install Node dependencies
      working-directory: ./bae
      run: npm ci

    - name: Build release binary
      working-directory: ./bae
      run: cargo build --release --verbose

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bae-${{ matrix.os }}
        path: |
          bae/target/release/bae*
          bae/target/release/bae.exe
        retention-days: 30
